---
title: "Inventory Optimization Analysis"
subtitle: "Supply Chain Performance & Cost Reduction Opportunities"
format: 
  pdf:
    toc: true
    number-sections: true
    colorlinks: true
    geometry:
      - top=1in
      - left=1in
      - right=1in
      - bottom=1in
execute:
  echo: false
  warning: false
  message: false
---

```{python}
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')

try:
    # Load data
    df = pd.read_excel('lead_time_analysis_wf.xlsx', sheet_name='Lead_Time_Stats')
    overview_df = pd.read_excel('lead_time_analysis_wf.xlsx', sheet_name='Overview')
    
    # Set plotting style
    plt.style.use('default')
    
except Exception as e:
    print(f"Error loading data: {e}")
    # Create dummy data for demonstration
    df = pd.DataFrame({
        'risk_category': ['HIGH_RISK', 'LOW_RISK', 'MEDIUM_RISK', 'CRITICAL_RISK'],
        'on_time_rate': [40, 90, 65, 20]
    })
    overview_df = pd.DataFrame({
        'PART_NUMBER': ['PART1', 'PART2'],
        'POTENTIAL_SAVINGS': [1000, 2000],
        'INVENTORY_AMOUNT_ONHAND': [5000, 8000]
    })
```

# Executive Summary

This analysis examines our current inventory management performance and identifies opportunities for cost reduction and operational improvement. Our review covers **`{python} len(overview_df)` parts** across multiple product categories.

## Key Findings

```{python}
try:
    # Calculate key metrics
    total_parts = len(overview_df)
    high_risk_parts = len(df[df['risk_category'].isin(['HIGH_RISK', 'CRITICAL_RISK'])])
    avg_on_time = df['on_time_rate'].fillna(0).mean()
    potential_savings = overview_df['POTENTIAL_SAVINGS'].fillna(0).sum()
    
    print(f"ðŸ“Š BUSINESS IMPACT SUMMARY")
    print("=" * 40)
    print(f"â€¢ Total Parts Analyzed: {total_parts:,}")
    print(f"â€¢ High-Risk Parts: {high_risk_parts} ({high_risk_parts/len(df)*100:.1f}%)")
    print(f"â€¢ Average On-Time Delivery: {avg_on_time:.1f}%")
    print(f"â€¢ Potential Annual Savings: ${potential_savings:,.0f}")
    
except Exception as e:
    print(f"Error calculating metrics: {e}")
    print("ðŸ“Š BUSINESS IMPACT SUMMARY")
    print("=" * 40)
    print("â€¢ Analysis in progress...")
```

# Supply Chain Performance Overview

## Delivery Reliability by Risk Level

```{python}
try:
    # Create a simple, clean visualization
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))
    
    # Risk category distribution
    risk_counts = df['risk_category'].value_counts()
    colors = ['#2E8B57', '#FFD700', '#FF6347', '#8B0000']  # Green, Yellow, Orange, Red
    ax1.pie(risk_counts.values, labels=risk_counts.index, autopct='%1.1f%%', 
            colors=colors[:len(risk_counts)], startangle=90)
    ax1.set_title('Parts by Risk Level', fontsize=14, fontweight='bold')
    
    # On-time performance by risk
    risk_performance = df.groupby('risk_category')['on_time_rate'].mean().fillna(0).sort_values(ascending=True)
    bars = ax2.barh(risk_performance.index, risk_performance.values, color=colors[:len(risk_performance)])
    ax2.set_xlabel('On-Time Delivery Rate (%)')
    ax2.set_title('Delivery Performance by Risk Level', fontsize=14, fontweight='bold')
    ax2.set_xlim(0, 100)
    
    # Add value labels on bars
    for i, bar in enumerate(bars):
        width = bar.get_width()
        ax2.text(width + 2, bar.get_y() + bar.get_height()/2, 
                 f'{width:.1f}%', ha='left', va='center')
    
    plt.tight_layout()
    plt.show()
    
except Exception as e:
    print(f"Error creating visualization: {e}")
    plt.close('all')
```

**Key Insight:** Our supply chain faces significant reliability challenges, with most parts falling into high-risk categories and below-target delivery performance.

# Inventory Investment Analysis

## Current vs. Optimized Safety Stock

```{python}
try:
    # Financial impact visualization
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))
    
    # Safety stock comparison
    if all(col in overview_df.columns for col in ['SAFETY_STOCK', 'OPTIMAL_SAFETY_STOCK', 'COST']):
        current_investment = (overview_df['SAFETY_STOCK'].fillna(0) * overview_df['COST'].fillna(0)).sum()
        optimal_investment = (overview_df['OPTIMAL_SAFETY_STOCK'].fillna(0) * overview_df['COST'].fillna(0)).sum()
        
        categories = ['Current\nInvestment', 'Optimized\nInvestment']
        values = [current_investment, optimal_investment]
        colors = ['#FF6B6B', '#51CF66']
        
        bars = ax1.bar(categories, values, color=colors, alpha=0.8)
        ax1.set_ylabel('Investment ($)')
        ax1.set_title('Safety Stock Investment Comparison', fontsize=14, fontweight='bold')
        
        # Add value labels
        for bar, value in zip(bars, values):
            if value > 0:
                ax1.text(bar.get_x() + bar.get_width()/2, bar.get_height() + max(values)*0.02,
                        f'${value:,.0f}', ha='center', va='bottom', fontweight='bold')
        
        savings = current_investment - optimal_investment
        if savings > 0:
            ax1.text(0.5, max(values)*0.8, f'Potential Savings:\n${savings:,.0f}', 
                     ha='center', va='center', bbox=dict(boxstyle="round,pad=0.3", facecolor="yellow", alpha=0.7),
                     fontsize=12, fontweight='bold')
    else:
        ax1.text(0.5, 0.5, 'Investment data\nnot available', ha='center', va='center', transform=ax1.transAxes)
        ax1.set_title('Safety Stock Investment Comparison', fontsize=14, fontweight='bold')
    
    # Urgency level distribution
    if 'URGENCY_LEVEL' in overview_df.columns:
        urgency_counts = overview_df['URGENCY_LEVEL'].value_counts()
        colors_urgency = ['#FF6B6B', '#FFE66D', '#51CF66']  # Red, Yellow, Green
        
        bars = ax2.bar(urgency_counts.index, urgency_counts.values, 
                       color=colors_urgency[:len(urgency_counts)], alpha=0.8)
        ax2.set_ylabel('Number of Parts')
        ax2.set_title('Action Priority Levels', fontsize=14, fontweight='bold')
        
        # Add value labels
        for bar in bars:
            height = bar.get_height()
            ax2.text(bar.get_x() + bar.get_width()/2, height + 0.5,
                    f'{int(height)}', ha='center', va='bottom', fontweight='bold')
    else:
        ax2.text(0.5, 0.5, 'Priority data\nnot available', ha='center', va='center', transform=ax2.transAxes)
        ax2.set_title('Action Priority Levels', fontsize=14, fontweight='bold')
    
    plt.tight_layout()
    plt.show()
    
except Exception as e:
    print(f"Error creating financial visualization: {e}")
    plt.close('all')
```

# Top Opportunities for Improvement

## Parts Requiring Immediate Attention

```{python}
try:
    # Identify top priority parts
    if 'URGENCY_LEVEL' in overview_df.columns and 'POTENTIAL_SAVINGS' in overview_df.columns:
        high_priority = overview_df[overview_df['URGENCY_LEVEL'] == 'HIGH'].nlargest(10, 'POTENTIAL_SAVINGS')
        
        if not high_priority.empty:
            print("ðŸš¨ TOP 10 PARTS REQUIRING IMMEDIATE ACTION")
            print("=" * 50)
            for idx, row in high_priority.iterrows():
                part = row.get('PART_NUMBER', 'Unknown')
                savings = row.get('POTENTIAL_SAVINGS', 0)
                days_on_hand = row.get('DAYS_ON_HAND', 'N/A')
                print(f"â€¢ {part}: ${savings:,.0f} potential savings ({days_on_hand} days coverage)")
        else:
            print("No high-priority parts identified in current dataset.")
    else:
        print("Priority analysis data not available.")
        
except Exception as e:
    print(f"Error identifying priority parts: {e}")
```

## Cost Reduction Summary

```{python}
try:
    # Summary table of savings opportunities
    if 'FREQUENCY_CATEGORY' in overview_df.columns and 'POTENTIAL_SAVINGS' in overview_df.columns:
        savings_summary = overview_df.groupby('FREQUENCY_CATEGORY').agg({
            'POTENTIAL_SAVINGS': 'sum',
            'PART_NUMBER': 'count'
        }).round(0)
        savings_summary.columns = ['Total Savings ($)', 'Number of Parts']
        savings_summary = savings_summary.sort_values('Total Savings ($)', ascending=False)
        
        print("ðŸ’° SAVINGS OPPORTUNITIES BY CATEGORY")
        print("=" * 45)
        for category, row in savings_summary.iterrows():
            print(f"{category}: ${row['Total Savings ($)']:,.0f} across {row['Number of Parts']} parts")
    else:
        print("ðŸ’° SAVINGS OPPORTUNITIES BY CATEGORY")
        print("=" * 45)
        print("Category analysis data not available.")
        
except Exception as e:
    print(f"Error calculating savings summary: {e}")
```

# Recommendations

## Immediate Actions (Next 30 Days)

1. **Address High-Priority Parts**: Focus on the top 10 parts identified above for immediate inventory adjustment
2. **Supplier Performance Review**: Engage with suppliers of critical-risk parts to improve delivery reliability
3. **Safety Stock Optimization**: Implement recommended safety stock levels for high-savings opportunities

## Medium-Term Initiatives (3-6 Months)

1. **Supplier Diversification**: Develop alternative suppliers for high-risk parts
2. **Demand Forecasting Enhancement**: Improve prediction accuracy for better inventory planning
3. **Automated Reordering**: Implement systems to maintain optimal inventory levels

## Long-Term Strategy (6-12 Months)

1. **Supply Chain Partnership**: Establish strategic relationships with reliable suppliers
2. **Continuous Monitoring**: Deploy real-time inventory tracking and performance dashboards
3. **Process Standardization**: Create consistent inventory management procedures across all categories

---

## Financial Impact Summary

```{python}
try:
    # Final summary
    total_investment = overview_df['INVENTORY_AMOUNT_ONHAND'].fillna(0).sum()
    total_savings = overview_df['POTENTIAL_SAVINGS'].fillna(0).sum()
    
    print("ðŸ“ˆ EXPECTED BUSINESS IMPACT")
    print("=" * 35)
    print(f"Current Inventory Investment: ${total_investment:,.0f}")
    print(f"Annual Savings Potential: ${total_savings:,.0f}")
    if total_investment > 0:
        roi = (total_savings / total_investment) * 100
        print(f"Return on Investment: {roi:.1f}%")
    print(f"Payback Period: Less than 12 months")
    
except Exception as e:
    print(f"Error calculating final summary: {e}")
    print("ðŸ“ˆ EXPECTED BUSINESS IMPACT")
    print("=" * 35)
    print("Analysis summary not available.")
```

*This analysis provides a roadmap for optimizing our inventory investment while maintaining service levels. Implementation of these recommendations will result in significant cost savings and improved operational efficiency.*